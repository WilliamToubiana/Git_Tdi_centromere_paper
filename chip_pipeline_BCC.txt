{\rtf1\ansi\ansicpg1252\cocoartf2513
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fnil\fcharset0 Menlo-Regular;}
{\colortbl;\red255\green255\blue255;\red0\green0\blue0;\red235\green239\blue24;\red0\green0\blue0;
}
{\*\expandedcolortbl;;\cssrgb\c0\c1\c1;\cssrgb\c93803\c93590\c10850;\cssrgb\c0\c1\c1;
}
\paperw11900\paperh16840\margl1440\margr1440\vieww38600\viewh22380\viewkind0
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0

\f0\fs22 \cf2 \CocoaLigature0 \
##########################\
## Preparing chip reads ##\
##########################\
\
#Tdi as an example\
\
cd /scratch/wtoubian/\
\
cat Tdi*cenh3*R1*.gz > Tdi_testes_cenh3_1_R1.fq.gz\
cat Tdi*cenh3*R3*.gz > Tdi_testes_cenh3_1_R3.fq.gz\
\
cat Tdi*input*R1*.gz > Tdi_testes_input_1_R1.fq.gz\
cat Tdi*input*R3*.gz > Tdi_testes_input_1_R3.fq.gz\
\
\
\
####################\
## Trimming reads ##\
####################\
\
cd /scratch/wtoubian/\
\
for i in *_R1.fq.gz ; do\
        foo1=`echo $i`\
                basename=`echo $foo1 | sed 's/_R1.fq.gz//' | sed 's/.*\\///'`\
        infileR1=`echo $foo1`\
        infileR2=`echo $foo1 | sed 's/_R1.fq.gz/_R3.fq.gz/'`\
        outfileR1=`echo "./"$basename"_R1_qtrimmed.fq"`\
        outfileR2=`echo "./"$basename"_R3_qtrimmed.fq"`\
        outfileR1_UP=`echo "./"$basename"_R1_qtrimmed_UNPAIRED.fq"`\
        outfileR2_UP=`echo "./"$basename"_R3_qtrimmed_UNPAIRED.fq"`\
\
\
        trimmomatic PE -threads 16 $infileR1 $infileR2 $outfileR1 $outfileR1_UP $outfileR2 $outfileR2_UP ILLUMINACLIP:AllIllumina-PEadapters.fa:3:25:6 LEADING:9 TRAILING:9 SLIDINGWINDOW:4:15 MINLEN:90\
done\
\
\
\
\
###################\
## Mapping reads ##\
###################\
\
        ## bwa indexing genomes\
\
cd /scratch/wtoubian/bwa_timema_genomes/bwa_index/\
\
for i in *.fasta ; do\
       bwa index $i\
done\
\
        ##mapping \
\
#Tdi as an example \'97 I generally do not use loop here as genome file names are different\
#-c 1000000000 is simply because centromeres are made of tandem repeats and I do not want to discard reads mapping multiple times (if best score in multiple positions, the software randomly assign read to one of them)\
 \
bwa mem -t 16 -c 1000000000 -T 30 /scratch/wtoubian/bwa_timema_genomes/bwa_index/Tdi_LRv5a_mtDNAv350.fasta Tdi_testes_cenh3_1_R1_qtrimmed.fq Tdi_testes_cenh3_1_R3_qtrimmed.fq > /scratch/wtoubian/chip_cenh3_tdi_testes_1_bwa.sam\
\
bwa mem -t 16 -c 1000000000 -T 30 /scratch/wtoubian/bwa_timema_genomes/bwa_index/Tdi_LRv5a_mtDNAv350.fasta Tdi_testes_input1_R1_qtrimmed.fq Tdi_testes_input1_R3_qtrimmed.fq > /scratch/wtoubian/chip_input_tdi_testes_1_bwa.sam\
\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0
\cf3 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0
\cf2 		##sam file processing\
\
cd /scratch/wtoubian/\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0
\cf4 for i in  *.sam; do\
    outflagstat=`echo $i | sed 's/.sam/_flagstat.txt/'`\
    outbam=`echo $i | sed 's/.sam/.bam/'`\
    badnames=`echo $i | sed 's/.sam/_badnames.txt/'`\
    outbamF=`echo $i | sed 's/.sam/_final.bam/'`\
    outflagstatF=`echo $i | sed 's/.sam/_final_flagstat.txt/'`\
\
\
       samtools flagstat $i > $outflagstat      #flagstat\
       samtools view -u $i | samtools sort -o $outbam  #sort bam\
       samtools view $outbam | fgrep SA:Z: | cut -f 1 > $badnames      #remove supp (chimeric) alignments\
       samtools view -h $outbam | fgrep -vf $badnames | samtools view -b > $outbamF    #remove supp (chimeric) alignments\
       samtools flagstat $outbamF > $outflagstatF      #flagstat\
\
\
done\
\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0
\cf2 \
        ##remove PCR duplicates \
\
cd /scratch/wtoubian/\
\
for i in  *final.bam; do\
    outbam=`echo $i | sed 's/_bwa_final.bam/_bwa_final_DR.bam/'`\
       flagstat_out_bam=`echo $outbam | sed 's/.bam/_flagstat_out.txt/'`\
       metric_file=`echo $outbam | sed 's/.bam/_metric.txt/'`\
\
\
       picard MarkDuplicates REMOVE_DUPLICATES=true \\\
       INPUT=$i \\\
    OUTPUT=$outbam \\\
    METRICS_FILE=$metric_file\
\
       samtools flagstat $outbam > $flagstat_out_bam\
\
done\
\
\
\
###############################\
## Preparing genome assembly ##\
###############################\
\
#To calculate coverage, I first generate non-overlapping 10kb windows in which I subsequently calculate genome-wide coverage (Tdi as an example)\
\
cd /work/FAC/FBM/DEE/tschwand/asex_sinergia/wtoubian/genomes/chip\
\
samtools faidx Tdi_LRv5a_mtDNAv350.fasta\
\
cut -f1,2 Tdi_LRv5a_mtDNAv350.fasta.fai > Tdi_chm_size_mtDNAv350.txt\
\
bedtools makewindows -g Tdi_chm_size_mtDNAv350.txt -w 10000  > Tdi_chm_size_mtDNAv350_w10000.bed\
\
\
\
\
###########################\
## Calculate coverage GW ##\
###########################\
\
module load gcc\
module load bedtools2\
\
\
        ## GW coverage (10 kb bins) \
\
#Tdi as an example\
\
cd /work/FAC/FBM/DEE/tschwand/asex_sinergia/wtoubian/\
\
bedtools coverage -a genomes/Tdi_chm_size_mtDNAv350_w10000.bed -b /scratch/wtoubian/chip_cenh3_tdi_testes_1_bwa_final_DR.bam -sorted -g genomes/Tdi_LRv5a_mtDNAv350.fasta.fai -mean > /scratch/wtoubian/chip/Tdi_cenh3_testes_1_GW_coverage_DR.txt\
\
bedtools coverage -a genomes/Tdi_chm_size_mtDNAv350_w10000.bed -b /scratch/wtoubian/chip_input_tdi_testes_1_bwa_final_DR.bam -sorted -g genomes/Tdi_LRv5a_mtDNAv350.fasta.fai -mean > /scratch/wtoubian/chip/Tdi_input_testes_1_GW_coverage_DR.txt\
\
\
\
\
\
\
}